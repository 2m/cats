#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Subsection
Particle filter
\end_layout

\begin_layout Standard
The basic principle of a particle filter is to by a particle optimization
 technique filter noisy data.
 It is a Bayesian recursive method which means it iteratively tries to estimate
 a state vector by a probability distribution using data to evaluate and
 update the same distribution.
 It has been proven to be very useful on bearings-only problems localizing
 robots
\begin_inset CommandInset citation
LatexCommand cite
key "Rekleitis"

\end_inset

.
 The basic system looks like in equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Particle filter state space 1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Particle filter state space 2"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{k}=f(x_{k-1})+w_{k}\label{eq:Particle filter state space 1}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
y_{k}=h(x_{k})+v_{k}\label{eq:Particle filter state space 2}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If the function 
\begin_inset Formula $f(\cdot)$
\end_inset

 and 
\begin_inset Formula $h(\cdot)$
\end_inset

 where linear functions that could be seen as a matrix multiplication with
 respective 
\begin_inset Formula $x_{k}$
\end_inset

 and 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 Gaussian distributed errors, the system would be the same used in the Kalman
 filter.
 However in many applications 
\begin_inset Formula $f(\cdot)$
\end_inset

 and 
\begin_inset Formula $h(\cdot)$
\end_inset

 are non-linear and 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 are not Gaussian.
 
\begin_inset Formula $x_{k}$
\end_inset

 is the state vector estimate at time k.
 Around this vector there lies a probability distribution corresponding
 to the uncertainty of the state vector.
 The main advantages to particle filters is that they can handle non-linearity's
 without compromising on accuracy or the need for linearization.
\end_layout

\begin_layout Standard
Basically the algorithm looks like this:
\end_layout

\begin_layout Standard

\series bold
Draw random hypotheses 
\series default
about the states in the tracked object within a given probability density
 function, called and visualized as particles.
 This first step is only for initialization.
\end_layout

\begin_layout Standard

\series bold
Update particles
\series default
 (integration or similar) according to the estimated objects dynamics.
 Note that different states can have non-linear relations.
\end_layout

\begin_layout Standard

\series bold
Compare the states
\series default
 of each particle with sensor data (equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-error"

\end_inset

) and give each particle a weight indicating how well it conforms to it
 (equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-weight"

\end_inset

).
\begin_inset Formula \begin{equation}
\theta_{error}=\theta_{sensor}-tan^{-1}\left(\frac{y_{particle}-y_{sensor}}{x_{particle}-x_{sensor}}\right)\label{eq:particle-error}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
w_{i}=w_{i}\cdot e^{\frac{\theta_{error}^{2}}{2\sigma}}\label{eq:particle-weight}\end{equation}

\end_inset


\end_layout

\begin_layout Standard

\series bold
Calculate a weighted mean
\series default
 or similar method to get the estimated states of the tracked object (equation
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-norm-weights"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-covariance"

\end_inset

).
\begin_inset Formula \begin{equation}
\sum_{i=0}^{N}w_{i}=1\label{eq:particle-norm-weights}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\mu=\sum_{i=0}^{N}w\cdot u_{i}\label{eq:particle-mean}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
C_{jk}=\sum_{i=0}^{N}\frac{(u_{i}^{j}-\mu^{j})(u_{i}^{k}-\mu^{k})}{1-\sum_{i=0}^{N}w_{i}^{2}}\label{eq:particle-covariance}\end{equation}

\end_inset


\end_layout

\begin_layout Standard

\series bold
If needed, re-sample
\series default
 the particles based on the estimation of the tracked object (i.e.
 change the estimated PDF information contained in the particle swarm).
\end_layout

\begin_layout Standard
The above described steps are repeated, hence the name recursive algorithm,
 with information from the re-sampling step being the input of the update
 step.
\end_layout

\begin_layout Standard
In our specific case there was a need for two particle filters.
 One type for tracking the target and one type for positioning of the tracking
 robots.
 Also since we did not have to take height of a target into account (i.e.
 the arena for tracking was flat), all filters needed only to take the two
 dimensional case into account.
\end_layout

\begin_layout Standard
The tracking filter needed to estimate the position of the tracked object
 and, if possible, its speed.
 A natural choice for state variables was then the position in the x and
 y direction and velocity in the x and y direction.
\begin_inset Formula \begin{equation}
x_{k}=\left(\begin{array}{c}
r_{x}\\
r_{y}\\
v_{x}\\
v_{y}\end{array}\right)\label{eq:particle-tracking-states}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
For the positioning particle filter the states were chosen as x, y and heading
 angle.
 The camera, mounted on top of the robot, would sweep for targets, giving
 angles in a local reference system.
 These sightings could then be compared to the known positions of landmarks
 and how well a particles states would conform to this data.
\begin_inset Formula \begin{equation}
x_{k}=\left(\begin{array}{c}
r_{x}\\
r_{y}\\
\theta\end{array}\right)\label{eq:Particle filter positioning states}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
A Gaussian noise model was chosen, hence the ease of parameterizing the
 distribution in equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-mean"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:particle-covariance"

\end_inset

.
 A reason for choosing this model is that the data communication rate should
 be as low as possible when doing the calculations distributed over the
 cats.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
More?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Simulation
\end_layout

\begin_layout Standard
The tracking filter worked very well in simulation and did even estimate
 the speed quite correctly.
 The simulation was done in a 3x3 meter arena with 1 to 5 degrees of standard
 deviation of the angular error of the bearing.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/particle_filter_simulation_tracking.png
	lyxscale 25
	scale 45

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:particle_sim_tracking"

\end_inset

Plot from the simulation of the tracking particle filter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The positioning filter worked very well in simulation even though it, at
 most, could only see two landmarks at a time.
 The simulation was done in a 3x3 meter arena with 1 to 5 degrees of standard
 deviation of the angular error of the bearing.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/particle_filter_simulation_positioning.png
	lyxscale 25
	scale 45

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:particle_sim_pos"

\end_inset

Plot from the simulation of the positioning particle filter
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The good results from the simulation was a good indication that this filtering
 technique was a feasible solution.
 It was clear though that some optimization would be needed for the filtering
 technique to work on our desired platform.
 Also the code in the Matlab implementation was at first structured in a
 way that is very complex to do in Java.
 This came naturally since there was a great need to experiment.
 The last step in the implementation of the Matlab code was to change it
 so to use only statements which had equivalents in Java.
\end_layout

\end_body
\end_document
