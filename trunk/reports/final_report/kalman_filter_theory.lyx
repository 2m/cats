#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Subsection
Kalman filter theory
\end_layout

\begin_layout Subsubsection
The Kalman filter
\end_layout

\begin_layout Standard
The Kalman filter is a method of estimating state variables from noisy measureme
nts.
 With a provided state model of the system, a predicted state variable estimate
 of one time step ahead is computed.
 The uncertainty for this prediction is also calculated using the previous
 estimate.
 A weighted average of the actual measurement and the predicted value is
 then used as the output of the filter.
 The weights are chosen so that higher uncertainties get smaller weights
 and vice versa.
 The Kalman filter models the errors in the measurements and state estimates
 as Gaussian measurement noise and process noise respectively, with fixed
 standard deviations.
 These two standard deviations are user selectable parameters, which should
 be chosen so that the filter achieves the best performance.
 A lower measurement noise standard deviation means that the measurements
 are trusted more and given a bigger weight, which should be the case if
 the measurements are accurate.
 The process noise standard deviation works similarly, representing how
 much the state model should be trusted.
\end_layout

\begin_layout Standard
Given the low computational complexity of the nonlinear Kalman filters and
 the target platform's limited processing speed, we decided that it would
 be a interesting alternative to the particle filter to try out.
 The UKF was chosen over the EKF because of its advantage both regarding
 accuracy and ease of implementation.
 The full algorithm of the UKF will not be presented here, since our project
 used a pre-written Matlab implementation 
\begin_inset CommandInset citation
LatexCommand cite
key "UKFimple"

\end_inset

, later converted to Java.
 However, an important note is that the square root of the covariance matrix
 is required in a step of the algorithm.
 The square root of the matrix 
\emph on
B
\emph default
 is the matrix 
\emph on
A
\emph default
 satisfying 
\begin_inset Formula $B=AA^{T}$
\end_inset

.
 This can be computed in different ways, such as using the Cholesky decompositio
n, which requires that the matrix B is both symmetric and positive-definite.
\end_layout

\begin_layout Subsubsection
State model formulation
\end_layout

\begin_layout Standard
\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Standard
(a) 
\emph on
Tracking filter
\end_layout

\begin_layout Standard
Using the UKF made it possible to use the true non-linear state measurement
 equation given by
\end_layout

\begin_layout Standard
\begin_inset Formula $z_{k}=\left(\begin{array}{c}
\theta_{1}\\
\theta_{2}\\
\theta_{3}\end{array}\right)_{k}=\left(\begin{array}{c}
h_{1}(x_{k})\\
h_{2}(x_{k})\\
h_{2}(x_{k})\end{array}\right)+n_{k}$
\end_inset

,
\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\theta_{i}$
\end_inset

 is the absolute measured angle, relative to the arena reference frame,
 from cat 
\emph on
i.

\emph default
 Subscript 
\emph on
k
\emph default
 henceforth indicate the time step
\emph on
.

\emph default
 The states 
\begin_inset Formula $x_{k}$
\end_inset

 are chosen as 
\begin_inset Formula \[
x_{k}=\left(\begin{array}{c}
x\\
y\\
v_{x}\\
v_{y}\end{array}\right)_{k}\]

\end_inset

 where x and y are the 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
position of the mouse and 
\begin_inset Formula $v_{x}$
\end_inset

 and 
\begin_inset Formula $v_{y}$
\end_inset

 are its velocities.
 
\begin_inset Formula $h_{i}(x_{k})$
\end_inset

 is the non-linear measurement equation for cat 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
i
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 given by
\end_layout

\begin_layout Standard
\begin_inset Formula \[
h_{i}(x_{k})=arctan(\frac{y-y_{i}}{x-x_{i}})\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $y_{i}$
\end_inset

 and 
\begin_inset Formula $x_{i}$
\end_inset

 are the position of cat 
\emph on
i
\emph default
.
 
\begin_inset Formula $n_{k}$
\end_inset

 is the measurement noise with covariance matrix
\end_layout

\begin_layout Standard
\begin_inset Formula \[
R=r^{2}\left(\begin{array}{ccc}
1 & 0 & 0\\
0 & 1 & 0\\
0 & 0 & 1\end{array}\right)\]

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
r
\emph default
 is the standard deviation of the measurement noise.
 It is assumed that the noise of the measurements is uncorrelated and has
 equal power.
\end_layout

\begin_layout Standard
The movement of the mouse is modeled with constant velocity.
 This means that the acceleration of the mouse is modeled as process noise.
 The process model, or update formula, is
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\begin_inset Formula $x_{k}=Fx_{k-1}+Gw_{k}$
\end_inset


\end_layout

\begin_layout Standard
where 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $w_{k}$
\end_inset

 is the process noise.
 Using Newton's laws of motion we easily find that
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 
\begin_inset Formula \[
F=\left(\begin{array}{cccc}
1 & 0 & T & 0\\
0 & 1 & 0 & T\\
0 & 0 & 1 & 0\\
0 & 0 & 0 & 1\end{array}\right),\; G=\left(\begin{array}{c}
\frac{T^{2}}{2}\\
\frac{T^{2}}{2}\\
T\\
T\end{array}\right)\]

\end_inset

 where 
\emph on
T
\emph default
 is the sampling time period.
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
The process noise covariance matrix 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
Q
\emph default
 becomes
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Q=E[Gw_{k}(Gw_{k})^{T}]=q^{2}\left(\begin{array}{cccc}
\frac{T}{4}^{4} & 0 & \frac{T^{3}}{2} & 0\\
0 & \frac{T}{4}^{4} & 0 & \frac{T}{2}^{3}\\
\frac{T}{2}^{3} & 0 & T^{2} & 0\\
0 & \frac{T}{2}^{3} & 0 & T^{2}\end{array}\right)\]

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
q
\emph default
 is the standard deviation of the process noise.
\end_layout

\begin_layout Standard
(b) 
\emph on
Absolute positioning filter
\end_layout

\begin_layout Standard
The basic idea of the absolute positioning filter was that the problem of
 locating the mouse with several cat angle measurements is very similar
 to the problem of locating one cat using several landmark angle measurements.
 The state vector 
\begin_inset Formula $x_{k}$
\end_inset

 contains the cat position and velocity, while the measurement vector 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $z_{k}$
\end_inset

 is comprised of the measurements to the different landmarks.
 There are however some important differences between the two problems.
 First, with our chosen landmark positions, only at most one landmark would
 be seen at any given time.
 Therefore no classical triangulation can be done.
 The Matlab simulation showed that a filter implemented this way still could
 correct the position of the cat quite well with only one landmark measurement
 at a time.
 More importantly, the 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
absolute positioning filter should also estimate the 
\emph on
orientation
\emph default
 of the cat as it is needed in order to calculate the absolute angular measureme
nts to the mouse from relative measurements, given in the cat's coordinate
 system.
 Specifically, the absolute measurement from the cat to the mouse is given
 by 
\begin_inset Formula \[
\theta=\theta_{orient}+\theta_{rel}\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\theta_{orient}$
\end_inset

 is the orientation of the cat and 
\begin_inset Formula $\theta_{rel}$
\end_inset

 is the relative measurement to the mouse.
 The subscript 
\emph on
i
\emph default
 is dropped in the absolute positioning filter since it only considers one
 cat.
 The formula above means that errors in the cat's orientation will translate
 into an erroneous estimation of the mouse's position.
 
\end_layout

\begin_layout Standard
In contrast to the tracking filter, we have other sensors than the camera
 available, namely the motor odometers.
 The data from those can be used to calculate the cat's traveled distance
 and rotation.
 However, it was quickly realized that only relying on odometer data would
 give a quite bad estimation of the cat's position after a while, as the
 measurement errors accumulate.
 Therefore, the landmark measurements should be used as a way of correcting
 the cat's position when necessary.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Move to general section
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Incorporating velocity measurements in the measurement vector made it possible
 to use odometer data.
 The measurement vector now takes the form
\begin_inset Formula \[
z_{k}=\left(\begin{array}{c}
\theta_{1}\\
\theta_{2}\\
\theta_{3}\\
\theta_{4}\\
v_{x}\\
v_{y}\end{array}\right)\]

\end_inset

where 
\begin_inset Formula $\theta_{i}$
\end_inset

 is the absolute angular measurement to landmark 
\emph on
i.

\emph default
 
\begin_inset Formula $v_{x}$
\end_inset

 and 
\begin_inset Formula $v_{y}$
\end_inset

 are the x- and y-components of the cat's velocity.
 This solution was implemented successfully in Matlab.
 A more appropriate solution would be to use the velocity measurements in
 polar form, given as speed and orientation (or its derivative) instead
 of the x and y component of the velocity.
 That way a higher uncertainty can be assigned to the orientation and a
 lower to the speed, more closely mimicking the true dynamics of the system.
 This formulation however yielded undesirable results in the Matlab simulation
 and was therefore not followed out.
\end_layout

\begin_layout Subsubsection
Simulation in Matlab
\end_layout

\begin_layout Standard
The UKF filter also has a few user selectable parameters (
\begin_inset Formula $\alpha,\beta,\kappa$
\end_inset

) that were varied to see their effect on performance.
 The performance of the filter turned out to be almost the same no matter
 how the parameters were chosen.
 There was however a valid range for some of the parameters in which the
 covariance matrix remained positive definite.
 If the parameters were chosen badly the Cholesky factorization failed.
\end_layout

\begin_layout Standard
(a) 
\emph on
Tracking filter
\end_layout

\begin_layout Standard
The measurements in our implementation are intermittent, i.e.
 the cats cannot provide measurements all the time, and sometimes only a
 few cats might have measurements available.
 This has to be handled somehow as the standard formulation of the Kalman
 filter assumes that the measurements are available all the time.
 A simple way to take care of this is to set the elements in the measurement
 covariance matrix corresponding to the unavailable measurements to 
\begin_inset Formula $\infty$
\end_inset

.
 That way the measurement is given zero credibility and is weighted away.
 That is if measurement 
\emph on
i
\emph default
 is unavailable then set 
\begin_inset Formula $R_{ii}=\infty$
\end_inset

 instead of 
\begin_inset Formula $r^{2}$
\end_inset

.
 The measurement 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $z_{i,k}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 can then be set to anything.
 
\begin_inset Formula $R_{ii}$
\end_inset

 can be set to 
\emph on
inf 
\emph default
in
\emph on
 
\emph default
Matlab but since this is not possible in the brick implementation we instead
 set it a very large number (
\begin_inset Formula $10^{10}$
\end_inset

), about as large as double point arithmetic allows.
 In the Matlab simulation it was verified that this was large enough for
 the unavailable measurements (and therefore incorrect) to have no actual
 effect on the state estimates.
 Some further investigation showed that it is possible to modify the Kalman
 filter algorithm to only do the update step for the unavailable measurements.
 This would be a computationally more efficient solution and certainly more
 elegant.
 It was however concluded that it was simpler just to keep the previous
 solution.
\end_layout

\begin_layout Standard
It also turned out that the formulation of the measurement function had
 some problems with the discontinuous nature angles.
 Only angles in the range 
\begin_inset Formula $0-2\pi$
\end_inset

 were used.
 If a cat was providing angles very close to 0 or 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $2\pi$
\end_inset

 the position of the mouse diverged until the cat reported other angles.
 This seemed to get worse of the reported angles were fluctuating more,
 so the problem was probably that the reported angles were fluctuating between
 0 and 
\begin_inset Formula $2\pi$
\end_inset

.
 Because this only seemed to happen at a very limited angle, and therefore
 not very often, the formulation of the measurement function was kept to
 the java simulation and the brick implementation.
\end_layout

\begin_layout Standard
The performance of the UKF tracking filter is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UKF_linear"

\end_inset

 and Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UKF_circular"

\end_inset

.
 The cats are shown as black asterisks and their angular readings in the
 last time step as black lines.
 The true position of the mouse is shown as a red line, the estimated as
 a blue line.
 In both simulations three cats are observing the mouse at all times.
 The angular measurements to the mouse have an additive Gaussian measurement
 noise with a standard deviation of 2 degrees.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UKF_linear"

\end_inset

, the mouse is moving with a piecewise constant velocity, abruptly changing
 direction from one time step to another.
 We can see that the filter estimates converges to a value quite close to
 the true position when the mouse is moving straight with constant velocity.
 When the mouse changes direction, the acceleration is no longer zero as
 modeled, but very large for a short time.
 With this chosen process noise standard deviation this leads to an inertial
 movement in the position estimates.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UKF_circular"

\end_inset

 shows a situation with a constant acceleration.
 As expected the filter estimate can't converge as close as in the linear
 case.
 For comparison, static least squares estimates of the mouse's position
 are shown as green dots.
 Clearly, the UKF filter performs better than the latter, albeit the constant
 process disturbance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UKF_tracking-linear.pdf
	lyxscale 40
	scale 65

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:UKF_linear"

\end_inset

UKF Tracking filter simulation.
 Mouse is moving in a piecewise linear track.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UKF_tracking-circular.pdf
	lyxscale 40
	scale 65

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:UKF_circular"

\end_inset

UKF Tracking filter simulation.
 Mouse is moving in a circular track.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
(b) 
\emph on
Absolute positioning filter
\end_layout

\begin_layout Standard
The previously mentioned form of the filter was implemented in Matlab.
 That implementation used absolute angle measurements everywhere and could
 therefore not simulate static errors in the cat's orientation.
 The absolute
\emph on
 
\emph default
positioning filter was also implemented together with the tracking filter
 in order to get an idea of how the errors in the cat's position would translate
 into errors in the mouse's position.
\end_layout

\end_body
\end_document
