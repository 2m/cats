#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Subsection
Camera
\end_layout

\begin_layout Subsubsection
Extracting angle measurements 
\end_layout

\begin_layout Standard
Text
\end_layout

\begin_layout Subsubsection
Modified camera firmware 
\end_layout

\begin_layout Standard
While observing the camera output using the NXTCamView software we have
 noticed that tracked object is often split into two, four or even more
 parts.
 This effect can be seen even more significantly when lighting conditions
 are poor.
 The issue could be solved by taking into consideration all tracked objects
 and calculating median coordinates.
 This would have effectively introduced some overhead to the camera regulator
 code.
 We chose to modify camera firmware so that it does not split tracked objects
 or rather merges them before transmitting data to robot.
 We have found modified camera firmware called 
\begin_inset Quotes eld
\end_inset

MergeBlob
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "MergeBlob"

\end_inset

 which does exactly that.
 We have also tweaked the minimum and maximum size of the tracked objects.
\end_layout

\begin_layout Standard
Since we have started to modify camera's firmware we thought that it is
 good idea to put some more filtering logic to the camera so we can keep
 camera's AVR processor busy.
 We have added tracking object filtering by the Y coordinate 
\begin_inset CommandInset citation
LatexCommand cite
key "MergeBlobPatch"

\end_inset

.
 So objects which are lower than certain minimum and higher then certain
 maximum are not tracked.
 This is true since we know the height of the mouse and the height of the
 landmarks.
 This helped us to remove any unnecessary noise such as windows and other
 artificial light sources which could be mistakenly tracked.
\end_layout

\begin_layout Subsubsection
PD tracking-regulator 
\end_layout

\begin_layout Standard
We needed a regulator that would follow the movement of the mouse as good
 as possible to allow for fast mouse movement.
 Also, the regulator needed smart enough not to keep spinning the motor
 in one direction.
 Doing so resulted in that the camera cable got tangled up, thereby stopping
 the motor and hindering any further movement in that direction.
 The solution was implementing a lower and higher bound of the rotation
 of the camera.
 The bounds were chosen as [-180°, 180°] to allow a 360° field of view.
 Whenever the camera motor tried to go outside this bound, the direction
 of the motor changed.
\end_layout

\begin_layout Standard
When designing a regulator a regulator of this kind an error signal is necessary.
 Since it is desirable to keep the mouse in the middle of the camera picture
 (only horizontal direction concerned), the error was chosen to be the pixel
 distance from the mouse to the center of the picture, i.e.
 the difference between the mouse's location in the picture and the center.
 This error signal limited in resolution by the resolution of the camera
 and it is bounded by the field of view of the camera as well.
 If the mouse disappears outside of the picture, the error signal is set
 to the same as the bound on the side of the picture of which the mouse
 was last seen.
 Also, a control signal is necessary.
 The natural choice of the speed and direction of the motor was chosen.
\end_layout

\begin_layout Standard
First a simple proportional regulator was tested.
 It performed quite well, but became a bit oscillatory at high speeds, i.e.
 at large values of the P-parameter.
 Then a PID-controller was implemented, which yielded smoother and better
 performance.
 The integrating part was later dropped since it did not contribute to the
 performance, giving the final PD-controller.
\end_layout

\end_body
\end_document
