#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Subsection
Java simulation framework - GSim
\end_layout

\begin_layout Standard
It was clear from the start that the work of implementing and experimenting
 with different filters would be carried out parallel to implementing the
 base system on the brick (networking, motors, camera etc.).
 Since this would result in long waits for the filter implementation a simulatio
n framework would be needed.
 This would also give an opportunity to weed out bugs and test robustness
 in a controlled environment with good debugging tools available.
 A screen shot of the simulation is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GSim"

\end_inset

.
\end_layout

\begin_layout Standard
The simulation is written in a way that the filter code would work with
 no or minor modifications (i.e.
 importing other libraries) on the brick.
 During the work with the implementation the simulation was changed to reflect
 the architectural decisions made for the brick.
\end_layout

\begin_layout Standard
The class structure was built using a base class for each type of filter
 that was slightly different on the brick and in the simulation but with
 all interfaces looking the same on both platforms.
 In the simulation a draw method was called at each graphics update to give
 feedback to the user.
 All noise in the simulation was, as often in simulations, ideal, but still
 gave a opportunity to test the basic robustness of the filtering methods.
\end_layout

\begin_layout Standard
Moving the code from the simulation to the brick was easy and development
 of the different parts of the project could be made parallel.
 At the end the simulation contained many thousands of lines of code.
 It still saved time since almost no bugs where encountered when the filters
 were on the brick.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/GSim.png
	lyxscale 40
	scale 40

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GSim"

\end_inset

Java simulation framework in action showing three cats (red dots) tracking
 a target with the particle filter (blue dot covered with green particles)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
